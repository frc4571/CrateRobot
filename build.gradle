/**
Template file for classes using GradleRIO
@author Jaci
*/

//----------------------------------------- BUILD SCRIPT ------------------------------------------------//

buildscript {
  repositories {
    mavenLocal()
	mavenCentral()
	maven {
		name = "GradleRIO"
		url = "http://dev.imjac.in/maven"
	}
  }
  dependencies {
    classpath group: 'jaci.openrio.gradle', name: 'GradleRIO', version: '+'			//Change this line if you wish to Update GradleRIO
    classpath group: 'org.apache.commons', name: 'commons-collections4', version: '4.1'
    classpath group: 'junit', name: 'junit', version: '4.+'
  }
}

//----------------------------------------- PLUGINS DEFINITION ------------------------------------------------//

apply plugin: 'java'
apply plugin: 'java-gradle-plugin'
apply plugin: 'idea'
apply plugin: 'eclipse'
apply plugin: 'GradleRIO'                                 //Apply the GradleRIO plugin
apply plugin: 'jacoco'

//----------------------------------------- TEAM INFO MANAGEMENT ------------------------------------------------//

gradlerio.robotClass = "org.usfirst.frc.team4571.Robot"   //The class for the main Robot Class. Used in manifest
gradlerio.team = "4571"                                   //Your FRC team number (e.g. 5333 for team 'Can't C#', or 47 for Chief Delphi)
gradlerio.rioIP = "10.45.71.20"                         //Uncomment to specify the IP address of the RIO

//----------------------------------------- BUILDING THE JAR ------------------------------------------------//

def robotManifest = {
  attributes 'Main-Class': 'edu.wpi.first.wpilibj.RobotBase'
  attributes 'Robot-Class': gradlerio.robotClass
  attributes 'Implementation-Title': 'Crate Robot'
}

jar {
  baseName = project.name
  from configurations.compile.collect { it.isDirectory() ? it : zipTree(it) }
  manifest robotManifest
}

task genJavadoc(type: Jar, dependsOn: javadoc) {
  classifier = 'javadoc'
  from javadoc.destinationDir
}

artifacts {
  archives genJavadoc
}

sourceSets {
    main {
        java {
            srcDirs = ['src']
        }
        resources {
            srcDirs = ['src/resources']
        }
    }
    test {
        java {
            srcDirs = ['test']
        }
        resources {
            srcDirs = ['test/resources']
        }
    }
}

// Appending a project version to the jar. version is passed in with -PprodVersion=...
allprojects {
    if (project.hasProperty('prodVersion')) {
        project.version = project.prodVersion
    } else {
        project.version = 'developer-build'
    }
}

//----------------------------------------- CODE COVERAGE REPORTS ------------------------------------------------//

task codeCoverageReport(type: JacocoReport) {
    executionData fileTree(project.rootDir.absolutePath).include("**/build/jacoco/*.exec")

    reports {
        xml.enabled true
        xml.destination "${buildDir}/reports/jacoco/report.xml"
        html.enabled false
        csv.enabled false
    }
}

jacocoTestReport {
    reports {
        xml.enabled true
    }
}
