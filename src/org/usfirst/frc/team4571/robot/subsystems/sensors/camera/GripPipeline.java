package org.usfirst.frc.team4571.robot.subsystems.sensors.camera;

import org.opencv.core.Core;
import org.opencv.core.Mat;
import org.opencv.core.Scalar;
import org.opencv.imgproc.Imgproc;

/**
 * Sample BasketballPipeline for testing purposes. 
 * This has literally nothing to do with the CrateRobot.
 *
 * <p>An OpenCV pipeline generated by GRIP.
 *
 * @author GRIP
 */
public class GripPipeline {

	static {
		System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
	}
	
	//Outputs
	private Mat hsvThresholdOutput;
	private Mat desaturateOutput;

	public GripPipeline(){
		this.hsvThresholdOutput = new Mat();
		this.desaturateOutput   = new Mat();
	}
	
	/**
	 * This is the primary method that runs the entire pipeline and updates the outputs.
	 */
	public void process(Mat source0) {
		// Step HSV_Threshold0:
		Mat hsvThresholdInput = source0;
		double[] hsvThresholdHue = {0.0, 180.0};
		double[] hsvThresholdSaturation = {18.345323741007192, 255.0};
		double[] hsvThresholdValue = {236.19604316546764, 250.64846416382252};
		hsvThreshold(hsvThresholdInput, hsvThresholdHue, hsvThresholdSaturation, hsvThresholdValue, hsvThresholdOutput);

		// Step Desaturate0:
		Mat desaturateInput = hsvThresholdOutput;
		desaturate(desaturateInput, desaturateOutput);
	}

	/**
	 * This method is a generated getter for the output of a HSV_Threshold.
	 * @return Mat output from HSV_Threshold.
	 */
	public Mat hsvThresholdOutput() {
		return hsvThresholdOutput;
	}

	/**
	 * This method is a generated getter for the output of a Desaturate.
	 * @return Mat output from Desaturate.
	 */
	public Mat desaturateOutput() {
		return desaturateOutput;
	}

	/**
	 * Segment an image based on hue, saturation, and value ranges.
	 *
	 * @param input The image on which to perform the HSL threshold.
	 * @param hue The min and max hue
	 * @param sat The min and max saturation
	 * @param val The min and max value
	 * @param output The image in which to store the output.
	 */
	private void hsvThreshold(Mat input, double[] hue, double[] sat, double[] val,
			Mat out) {
		Imgproc.cvtColor(input, out, Imgproc.COLOR_BGR2HSV);
		Core.inRange(out, new Scalar(hue[0], sat[0], val[0]),
				new Scalar(hue[1], sat[1], val[1]), out);
	}

	/**
	 * Converts a color image into shades of grey.
	 * @param input The image on which to perform the desaturate.
	 * @param output The image in which to store the output.
	 */
	private void desaturate(Mat input, Mat output) {
		switch (input.channels()) {
		case 1:
			// If the input is already one channel, it's already desaturated
			input.copyTo(output);
			break;
		case 3:
			Imgproc.cvtColor(input, output, Imgproc.COLOR_BGR2GRAY);
			break;
		case 4:
			Imgproc.cvtColor(input, output, Imgproc.COLOR_BGRA2GRAY);
			break;
		default:
			throw new IllegalArgumentException("Input to desaturate must have 1, 3, or 4 channels");
		}
	}
}